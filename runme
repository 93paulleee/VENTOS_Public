#!/bin/bash

if [ "$EUID" -eq 0 ]; then 
  printf "\e[1;31mDo not run the script with sudo permission! \e[0m \n\n"
  exit 1
fi

echo "Bash version is: $BASH_VERSION$"


##############
## Check OS ##
##############

OS='unknown'
CODENAME='unknown'
VER='unknown'
ARCH='unknown'

# get current OS information
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    # Ubuntu
    OS=$(lsb_release -si)
    VER=$(lsb_release -sr)
    CODENAME=$(lsb_release -sc)
    ARCH=$(uname -m)
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
    OS=$(sw_vers -productName)
    VER=$(sw_vers -productVersion)
    ARCH=$(uname -m)
fi

echo "Detected OS:" $OSTYPE $OS $VER "("$CODENAME")", $ARCH

# check OS support
arrIN=(${VER//./ })  # split version into array x.y.z --> x | y | z
VER_major=${arrIN[0]}
VER_minor=${arrIN[1]}

if [[ ("$OSTYPE" == "linux-gnu" && "$OS" == "Ubuntu" && "$VER_major" == "15" && "$VER_minor" == "10") ]]; then
    echo "Starting script ..."

elif [[ ("$OSTYPE" == "linux-gnu" && "$OS" == "Ubuntu" && "$VER_major" == "14" && "$VER_minor" == "04") ]]; then
    echo "Starting script ..."

elif [[ ("$OSTYPE" == "linux-gnu" && "$OS" == "Ubuntu" && "$VER_major" == "12" && "$VER_minor" == "04") ]]; then
    echo "Starting script ..."

# Yosemiti
elif [[ ("$OSTYPE" == "darwin"* && "$OS" == "Mac OS X" && "$VER_major" == "10" && "$VER_minor" == "10") ]]; then
    echo "Starting script ..."

# El Capitan
elif [[ ("$OSTYPE" == "darwin"* && "$OS" == "Mac OS X" && "$VER_major" == "10" && "$VER_minor" == "11") ]]; then
    echo "Starting script ..."

else
    echo -n "This OS is not supported (yet)! Do you want to continue anyway? (y/n) "
    read answer
    if echo "$answer" | grep -iq "^y" ;then
        echo "Starting script ..."
    else
        exit 1 # terminate and indicate error
    fi
fi


##################
## function def ##
##################

install_LIB_linux ()
{
    declare -a argAry=("${!1}")
    for i in "${argAry[@]}"
    do
        # check if package $i is installed
        echo -n $i "..."
        PKG_OK=$(dpkg -s $i 2> /dev/null | grep "install ok installed")
        if [ "" == "$PKG_OK" ]; then
            echo "installing"
            echo $sudoPass | sudo -S apt-get --force-yes --yes install $i > /dev/null
        else
            echo "ok"
        fi
    done
}

install_LIB_Mac ()
{
# brew list
# brew install <>
# brew remove <>
# brew search
# homebrew installs in /usr/local/Cellar/

    declare -a argAry=("${!1}")
    for i in "${argAry[@]}"
    do
        # get the last component like Caskroom/cask/xquartz
        last=$(basename $i)
        # check if package $last is installed
        echo -n $last "..."
        PKG_OK1=$(brew list | grep -w $last)
        PKG_OK2=$(brew cask list 2> /dev/null | grep -w $last)
        if [[ ("" == "$PKG_OK1") && ("" == "$PKG_OK2") ]]; then
            echo "installing"
            echo $sudoPass | sudo -S -v  # brew install might need sudo access
            brew install $i > /dev/null  # $i: we need the full package name!
            # check if everything went well?
            if [[ $? -ne 0 ]]; then
                exit 1
            fi
        else
            echo "ok"
        fi
    done
}

# wget --progress=bar:force -O gnuplot.tar.gz URL.tar.gz 2>&1 | progressfilt
progressfilt ()
{
    local flag=false c count cr=$'\r' nl=$'\n'
    while IFS='' read -d '' -rn 1 c
    do
        if $flag
        then
            printf '%c' "$c"
        else
            if [[ $c != $cr && $c != $nl ]]
            then
                count=0
            else
                ((count++))
                if ((count > 1))
                then
                    flag=true
                fi
            fi
        fi
    done
}

# 0: equal
# 1: $1 > $2
# 2: $1 < $2
vercomp () 
{
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

# 0: found
# 1: older lib found
# 2: no lib found
getLibVersions_Linux ()
{
    allLIBs=$(ldconfig -p | grep $1)
    declare new_value=''
    arr=()

    # read line by line
    while IFS= read -r a; do
        loc=$(echo $a | awk '{print $4}')

        if [[ "" != "$loc" ]]; then
            # resolve if a sym link
            if [[ -h $loc ]]; then
                loc=$(readlink -f $loc)
            fi

            # first time? (removing duplicates)
            if [[ ! $new_value =~ $loc ]] ; then
                new_value="$new_value $loc"
                arr+=("$loc")
            fi
        fi
    done < <(echo "$allLIBs")

    # no lib found
    if [ ${#arr[@]} -eq 0 ]; then
        return 2
    fi

    # sort arr
    IFS=$'\n' arr=($(sort <<<"${arr[*]}"))

    # print the found libs
    echo "$1 found in these locations:"
    for i in "${arr[@]}"
    do
        echo "    $i"
    done

    for i in "${arr[@]}"
    do
        # get lib name
        libName=$(basename $i)

        # extract version
        version=$(echo $libName | grep -Po '\.so\.\K([0-9]+\.)*[0-9]+')

        # if a suitable version found!
        vercomp "$version" "$2"
        result=$?
        if ! [[ "$result" == "2" ]]; then
            return 0
        fi
    done

    # older lib found
    return 1
}

# 0: found
# 1: older lib found
# 2: no lib found
getLibVersions_Mac ()
{
    # older lib found
    return 0
}


####################
## Starting point ##
####################

# ask for sudo password only once
while true; do 
    unset sudoPass
    prompt="[sudo] password for $USER: "
    while IFS= read -p "$prompt" -r -s -n 1 char
    do
        if [[ $char == $'\0' ]]
        then
            break
        fi
        prompt='*'
        sudoPass+="$char"
    done
    echo ""

    # now check if we have sudo access?
    echo $sudoPass | sudo -k -S -v > /dev/null 2> /dev/null
    if [[ $? -eq 0 ]]; then
        break;
    else
        echo "sudo password is not correct!"
    fi
done

: <<'END'
# ask for github username/pass
while true; do
    unset gitUsername 
    read -p "github username: " gitUsername

    unset gitPass
    prompt="github password: "
    while IFS= read -p "$prompt" -r -s -n 1 char
    do
        if [[ $char == $'\0' ]]
        then
            break
        fi
        prompt='*'
        gitPass+="$char"
    done
    echo ""

    # now check if username/pass is correct
    git ls-remote https://$gitUsername:$gitPass@github.com/ManiAm/VENTOS > /dev/null 2> /dev/null
    if [[ $? -eq 0 ]]; then
        break;
    else
        echo "github username/password is not correct!"
    fi
done
END

# get current directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# change directory to VENTOS
cd $DIR
# change directory to parent of VENTOS (Desktop)
cd ..
# make directory in tmp to store all downloaded files
mkdir /tmp/VENTOS_tmp

if [[ "$OS" == "Mac OS X" ]]; then

    # check if Command Line Tools is installed
    xcode-select -p > /dev/null 2> /dev/null
    result=$?
    if [[ $result == "2" ]]; then
        echo "installing command line tools ..."
        printf "\e[1;32mChoose the Install button in the window that pops up.\e[0m \n"
        printf "\e[1;32mAfter completion, run the script again.\e[0m \n\n"
        xcode-select --install
        exit 1
    elif [[ $result == "0" ]]; then
        ver=$(pkgutil --pkg-info=com.apple.pkg.CLTools_Executables | grep 'version:' | awk '{print $2}')
        echo "Command line tools version $ver found!"
    fi

    # check if Homebrew is installed
    which brew
    if [[ $? != 0 ]] ; then
        # Install Homebrew
        echo "installing homebrew ..."
        echo $sudoPass | sudo -S -v
        # note the <
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null
    else
        ver=$(brew -v 2> /dev/null | awk '{print $2}')
        echo "Homebrew version $ver found!"
        echo -n "updating homebrew ... "
        brew update > /dev/null 2> /dev/null
        echo "ok"
    fi

    # installing brew cask
    echo "checking brew cask ..."
    echo $sudoPass | sudo -S -v
    brew cask list > /dev/null 2> /dev/null
fi

# check java version
version=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}')
if [[ "" != "$version" ]]; then
    echo "java version is" $version
fi

# should we install java?
version=$(echo $version | sed 's/_.*$//') # remove the _
vercomp "$version" "1.7"
result=$?
if [[ "$result" == "2" ]]; then

    if [[ "$OS" == "Ubuntu" ]]; then
        echo "java version should be >= 1.7"
        echo "[1] install OpenJDK 1.7"
        echo "[2] install Oracle Java 1.8"
        echo -n "your selection? [1] "
        read answer
        if [[ ("$answer" == "") || ("$answer" == "1") ]]; then
            echo $sudoPass | sudo -S apt-get --force-yes --yes install openjdk-7-jre
        elif [[ "$answer" == "2" ]]; then
            echo $sudoPass | sudo -S add-apt-repository -y ppa:webupd8team/java > /dev/null
            echo $sudoPass | sudo -S apt-get update > /dev/null
            # accept the Oracle JDK8 license automatically 
            echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections
            echo $sudoPass | sudo -S apt-get --force-yes --yes install oracle-java8-installer
            # set the Java environment variables
            echo $sudoPass | sudo -S apt-get install oracle-java8-set-default > /dev/null       
        else
            exit 1;
        fi
    elif [[ "$OS" == "Mac OS X" ]]; then
        # we have already requested to install java
        echo "requesting to install java ..."
        printf "\e[1;32mChoose the More Info button in the window that pops up and install the latest JDK. After completion, run the script again.\e[0m \n\n"
        exit 1
    fi
fi

# we need to install java 6 legacy as well
if [[ "$OS" == "Mac OS X" ]]; then
libs=("Caskroom/versions/java6")
    install_LIB_Mac libs[@]
fi

if [[ "$OS" == "Ubuntu" ]]; then
    # refresh the databse of available packages
    echo "updating available packages ..."
    echo $sudoPass | sudo -S apt-get update > /dev/null 2> /dev/null
fi

echo ""
echo "Checking downloaders"
echo "===================="
libs=("lftp" "curl")  # curl is prefered over wget since Mac OS X has curl by default
if [[ "$OS" == "Ubuntu" ]]; then
    install_LIB_linux libs[@]
elif [[ "$OS" == "Mac OS X" ]]; then
    install_LIB_Mac libs[@]
fi


################################
## Start OMNET++ installation ##
################################

if [[ "$OS" == "Ubuntu" ]]; then
    echo ""
    echo "Check main libraries for OMNET++"
    echo "================================"
    libs=("build-essential" "gcc" "g++" "bison" "flex" "perl" "tcl-dev" "tk-dev" "libxml2-dev" "zlib1g-dev" "doxygen" "graphviz" "libwebkitgtk-1.0-0")
    install_LIB_linux libs[@]

    echo ""
    echo "Check additional libraries for OMNET++"
    echo "======================================"
    # "openmpi-bin" and "libopenmpi-dev are for parallel simulation support (MPI)
    libs=("openmpi-bin" "libopenmpi-dev" "libpcap-dev" "gnome-color-chooser" "valgrind")
    install_LIB_linux libs[@]

    echo ""
    echo "Check 3D visualization libraries for OMNET++"
    echo "============================================"
    libs=("qt4-qmake" "libqt4-dev" "libqt4-opengl-dev" "openscenegraph" "libopenscenegraph-dev" "openscenegraph-plugin-osgearth" "osgearth" "osgearth-data" "libosgearth-dev")
    install_LIB_linux libs[@]

elif [[ "$OS" == "Mac OS X" ]]; then
    echo ""
    echo "Check main libraries for OMNET++"
    echo "================================"
    libs=("open-mpi" "Caskroom/cask/xquartz")
    install_LIB_Mac libs[@]
fi

echo ""
echo "Preparing to install OMNET++"
echo "============================"
ver=$(opp_run -v 2> /dev/null | grep 'Build:' | awk '{print $2}')
if [[ "" != "$ver" ]]; then
    loc=$(which opp_run)
    echo "found $ver in"
    echo "    $loc"
    echo "skip downloading/making omnet++"    
else

echo ""
echo "Downloading OMNET++"
echo "==================="
# check if omnet directory exists
if [ ! -d "omnetpp-4.6" ]; then
    # searching for omnet++ archive
    findings=$(find /tmp/VENTOS_tmp -name "omnetpp*.tgz" -o -name "omnetpp*.tar" | wc -l | xargs)  # xargs: remove all whitespaces
    if [[ "$findings" = "0" ]]; then        
        echo "downloading omnet++"
        lftp -e 'pget -n 5 omnetpp-4.6-src.tgz -o /tmp/VENTOS_tmp/omnetpp.tgz; bye' -p 28 -u userftp,userftp ftp://rubinet.ece.ucdavis.edu/download
    elif [[ "$findings" > "1" ]]; then
        echo "ERROR: more than one omnet++ archive file exists!"
        exit 1
    fi
    
    # now that we have the file, we can extract!
    omnetFile=$(find /tmp/VENTOS_tmp -name "omnetpp*.tgz" -o -name "omnetpp*.tar")
    echo "found" $omnetFile
    echo -n "extracting omnet ..."
    tar zxf $omnetFile  
    echo "done!"
else
    echo "omnetpp-4.6 folder already exists!"
fi

echo ""
echo "Running OMNET++ configure"
echo "========================="

# In the OMNET++ folder you can see the `configure.in` file that is used by autoconf to generate the `configure` script. Additional input parameters for configure script are defined in `configure.user` file. The configure script detects installed software and configuration of your system, and generates three outputs: `config.log`, `config.status`, and `Makefile.inc`. The first two files are used for debugging purposes, and the last file will be read later by the makefiles during the build process.

# go to omnet directory
cd omnetpp-4.6
if [[ $? -ne 0 ]]; then
    exit 1
fi

# run configure
confOut=$( { ./configure > /tmp/VENTOS_tmp/out.zvapoq; } 2>&1 )
printf "%s \n" "$confOut"

# terminate script on error
check=$(echo "$confOut" | grep "configure: error")
if [ "" != "$check" ]; then
    echo ""    # insert new line for readability
    exit 1
fi

# show instruction on setting java_path
check=$(echo "$confOut" | grep "configure: WARNING: JAVA_HOME")
if [ "" != "$check" ]; then

    if [[ "$OS" == "Ubuntu" ]]; then
help="follow these steps to set JAVA_HOME: 
1. Open ~/.bashrc in any text editor:
       gedit ~/.bashrc
2. Append the following line (change <java_folder> accordingly):
       export JAVA_HOME=/usr/lib/jvm/<java_folder>
3. Use source to reload .bashrc:
       source ~/.bashrc"
        printf "\n\e[1;32m$help\e[0m \n"

    elif [[ "$OS" == "Mac OS X" ]]; then
help="follow these steps to set JAVA_HOME: 
1. Open ~/.bash_profile in any text editor:
       nano ~/.bash_profile
2. Append the following line:
       export JAVA_HOME=`/usr/libexec/java_home`
3. Use source to reload .bashrc:
       source ~/.bash_profile"
        printf "\n\e[1;32m$help\e[0m \n"
    fi
fi

# show instruction on setting omnet path
check=$(echo "$confOut" | grep "WARNING: your PATH doesn't contain")
if [ "" != "$check" ]; then

    if [[ "$OS" == "Ubuntu" ]]; then
help="follow these steps to add OMNET++ bin folder to PATH: 
1. Open ~/.bashrc in any text editor:
       gedit ~/.bashrc
2. Append the above export command into .bashrc
3. Use source to reload .bashrc:
       source ~/.bashrc"
        printf "\n\e[1;32m$help\e[0m \n"

    elif [[ "$OS" == "Mac OS X" ]]; then
help="follow these steps to add OMNET++ bin folder to PATH: 
1. Open ~/.bash_profile in any text editor:
       nano ~/.bash_profile
2. Append the above export command into .bash_profile
3. Use source to reload .bash_profile:
       source ~/.bash_profile"
        printf "\n\e[1;32m$help\e[0m \n"
    fi
fi

# terminate script on java_home and omnet bin path warning
check=$(echo "$confOut" | grep -e "configure: WARNING: JAVA_HOME" -e "WARNING: your PATH doesn't contain")
if [ "" != "$check" ]; then
    printf "\n\e[1;31mAfter applying the changes, run the script again!\e[0m \n\n"
    exit 1
fi

# check if g++ suports c++11
# Starting from version 4.6, OMNET++ uses C++11 standard (formerly known as C++0x) by default. This means that OMNET++ source code as well as all the imported projects will be compiled with this flag. Look for this line in the configure output, and make sure that it is 'yes'.
value=$(</tmp/VENTOS_tmp/out.zvapoq)
res=$(echo "$value" | grep "supports -std=c++11... yes")
if [ "" = "$res" ]; then
    printf "\n\e[1;31mconfigure script reports that g++ does not support c++11.\e[0m \n\n"
    # get g++ version
    gppVER=$(g++ --version | grep ^g++ | sed 's/^.* //g')

    # should we install g++ 4.8?
    vercomp "$gppVER" "4.8"
    result=$?
    if [[ "$result" == "2" ]]; then
        echo -n "g++ version is" $gppVER". Install g++ 4.8 (y/n)? "
        read answer
        if echo "$answer" | grep -iq "^y" ;then
            echo $sudoPass | sudo -S add-apt-repository -y ppa:ubuntu-toolchain-r/test > /dev/null
            echo $sudoPass | sudo -S apt-get update > /dev/null
            echo $sudoPass | sudo -S update-alternatives --remove-all gcc > /dev/null
            echo $sudoPass | sudo -S update-alternatives --remove-all g++ > /dev/null
            echo $sudoPass | sudo -S apt-get --force-yes --yes install gcc-4.8
            echo $sudoPass | sudo -S apt-get --force-yes --yes install g++-4.8
            echo $sudoPass | sudo -S update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 20 > /dev/null
            echo $sudoPass | sudo -S update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 20 > /dev/null
            echo $sudoPass | sudo -S update-alternatives --config gcc > /dev/null
            echo $sudoPass | sudo -S update-alternatives --config g++ > /dev/null

            printf "\n\e[1;31mClose this terminal and run the script again!\e[0m \n"
            exit 1
        else
            exit 1;
        fi
    else
        # g++ version is >= 4.8. USE_CXX11 must be unset 
        printf "\e[1;31mc++11 is not enabled in OMNET++. Go to OMNET++ folder and open the 'configure.user' file. Find USE_CXX11 flag and set it to 'yes'.\e[0m \n"
        exit 1
    fi
fi

echo ""
echo "Making OMNET++"
echo "=============="

# start making omnet++
printf "\e[1;32mcompiling takes some time, so relax, grab a cup of coffee and \nwatch: https://www.youtube.com/watch?v=A6XUVjK9W4o \e[0m \n"
echo " "
make -j4 > /dev/null
echo "make is finished!"

echo ""
echo "Creating shortcut"
echo "================="

# Running OMNET++ each time from command line might not be desirable for you. You can create a shortcut or launcher to OMNET++ on your desktop.

echo -n "creating desktop shortcut ... "
make install-desktop-icon > /dev/null 2> /dev/null
echo "done!"

echo -n "creating application launcher ... "
echo $sudoPass | sudo -S make install-menu-item > /dev/null 2> /dev/null
echo "done!"

# go out of omnetpp folder
cd ..

fi  # end of omnetpp installation

echo ""
echo "Check gdb"
echo "========="

which gdb
if [[ $? != 0 ]] ; then
    # install gdb for debugging in eclipse
    if [[ "$OS" == "Ubuntu" ]]; then
        libs=("gdb")
        install_LIB_linux libs[@]
    elif [[ "$OS" == "Mac OS X" ]]; then
        libs=("gdb" "openssl")
        install_LIB_Mac libs[@]
    fi
else
    echo "gdb found in"
    echo "    $(which gdb)"
fi

# OS X 10.9 and later requires that you sign the gdb executable with a certificate
if [[ "$OS" == "Mac OS X" ]]; then
    autho=$(codesign --display --verbose=4 $(which gdb) 2>&1 | grep 'Authority')
    if [[ "" != "$autho" ]]; then
        echo "gdb is signed with $autho"
    else
        echo "gdb is not signed!"

        # looking for certificate VENTOS
        exists=$(security find-identity -p codesigning -s "VENTOS" | grep "identities found" | head -n1 | xargs | awk '{print $1}')
        if [[ $exists != 0 ]]; then
            echo "certificate VENTOS already exists!"
        else
            # make a directory in omnet to store keys and certificates
            mkdir omnetpp-4.6/keys
            # go to the directory
            cd omnetpp-4.6/keys
            # check if change directory was successful (next command is dangerous!)
            if [[ $? -ne 0 ]]; then
                exit 1
            fi
            # delete whats inside keys
            rm -rf * .* 2> /dev/null

cat > myconfig.cnf << EOF

[ req ]
prompt             = no
distinguished_name = my dn

[ my dn ]
# The bare minimum is probably a commonName
commonName = VENTOS
countryName = XX
localityName = Fun Land
organizationName = MyCo LLC LTD INC (d.b.a. OurCo)
organizationalUnitName = SSL Dept.
stateOrProvinceName = YY
emailAddress = ssl-admin@example.com
name = John Doe
surname = Doe
givenName = John
initials = JXD
dnQualifier = some

[ my server exts ]
keyUsage = digitalSignature
extendedKeyUsage = codeSigning

EOF
            # .key is a PEM formatted file containing just the private-key and 
            # is merely a conventional name and not a standardized one. 
            echo "generating the private key ..."
            openssl genrsa -des3 -passout pass:foobar -out server.key 2048

            # .csr is a 'Certificate Signing Request' and an application can generate it for submission to certificate-authorities. 
            # The actual format is PKCS10 which is defined in RFC 2986. It includes some/all of the key details of the requested 
            # certificate such as subject, organization, state, whatnot, as well as the public key of the certificate to get signed. 
            # -config myconfig.cnf -extensions 'my server exts' tells openssl the company name, etc. We could do this by passing the info 
            # in command line: http://stackoverflow.com/questions/8075274/is-it-possible-making-openssl-skipping-the-country-common-name-prompts 
            echo ""
            echo "generating the CSR (certificate signing request) ..."
            openssl req -new -passin pass:foobar -passout pass:foobar -key server.key -out server.csr -config myconfig.cnf -extensions 'my server exts'

            if [[ $? -ne 0 ]]; then
                exit 1
            fi

            # previously generated .csr is get signed by the CA and a certificate is returned (usually in x509 format). 
            # Note that the certificate contains the 'public key' but not the 'private key'.
            # -config myconfig.cnf -extensions 'my server exts' tells openssl to use extendedKeyUsage = codeSigning
            echo ""
            echo "generating the self-signed certificate ..."
            openssl x509 -req -passin pass:foobar -days 6666 -in server.csr -signkey server.key -out server.crt -extfile myconfig.cnf -extensions 'my server exts'

            if [[ $? -ne 0 ]]; then
                exit 1
            fi

            # .pkcs12 .pfx .p12 originally defined by RSA in the Public-Key Cryptography Standards, the "12" variant was enhanced by Microsoft. 
            # This is a passworded container format that contains both public and private certificate pairs (this container is fully encrypted)
            echo ""
            echo "convert crt + RSA private key into a PKCS12 (PFX) file ..."
            openssl pkcs12 -export -passin pass:foobar -passout pass:foobar -in server.crt -inkey server.key -out server.pfx

            # .pem Defined in RFC's 1421 through 1424, this is a container format that may include just the public certificate (such as with 
            # Apache installs, and CA certificate files /etc/ssl/certs), or may include an entire certificate chain including public key, 
            # private key, and root certificates. PEM files are not used in this script
            echo ""
            echo "convert crt + RSA private key into a PEM file ..."
            openssl x509 -inform PEM -in server.crt -out server.public.pem
            openssl rsa -passin pass:foobar -in server.key -out server.private.pem
            cat server.crt server.key > server.pem  # private key should come after

            # convert PKCS12 to PEM (this PEM contains certificate and then RSA private key)
            # openssl pkcs12 -passin pass:foobar -passout pass:foobar -in server.pfx -out server22.pem

            if [[ $? -ne 0 ]]; then
                exit 1
            fi

            echo ""
            echo "importing the certificate ..."
            echo $sudoPass | sudo -S security import server.pfx -k /Library/Keychains/System.keychain -P foobar
            
            # add-trusted-cer supports DER or PEM format (its not possible to import both cer and private key)
            #sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain server.pem

            if [[ $? -ne 0 ]]; then
                exit 1
            fi
        fi

        # check if certificate VENTOS is trusted?
        valid=$(security find-identity -p codesigning -s "VENTOS" | grep "identities found" | tail -n1 | xargs | awk '{print $1}')
        if [[ $valid != 0 ]]; then
            echo "certificate VENTOS is trusted. Good!"
        else
            echo ""
            echo "change trust of certificate VENTOS ..."
            printf "\e[1;32mIn Keychain Access window, select 'System' keychains from top left and 'Certificates' category from bottom left. Right-click on certificate VENTOS and select 'Get Info'. Open the Trust item and set Code Signing to 'Always Trust'. Close Keychain Access window and re-run this script. \e[0m \n\n"
            open -a 'Keychain Access'
            exit 1
        fi

        # before signing, we should either restart or run this
        echo $sudoPass | sudo -S killall taskgated

        echo ""
        echo "signing gdb ..."
        echo $sudoPass | sudo -S codesign -s VENTOS "$(which gdb)"

        if [[ $? -ne 0 ]]; then
            exit 1
        fi

        cd ..  # go out of key folder
        cd ..  # go out of omnet folder
    fi  # end of gdb signing

    # show a message that user needs to change the path to gdb
    printf "\e[1;32mDo not forget to modify 'GDB debugger' in OMNET++ Eclipse to \e[0m \n"
    printf "\e[1;32m    "$(which gdb)" \e[0m \n"
fi


################################
## Start of SUMO installation ##
################################
# following instructions in here
# http://sumo.dlr.de/wiki/Installing/MacOS_Build_w_Homebrew

# change directory to VENTOS
cd $DIR
if [[ $? -ne 0 ]]; then
    exit 1
fi
# change directory to parent of VENTOS
cd ..

echo ""
echo "Check main libraries for SUMO"
echo "============================="

if [[ "$OS" == "Ubuntu" ]]; then
    # should we add "libxerces-c2-dev" ? installing libgdal-dev removes libxerces-c2-dev!
    libs=("libtool" "automake" "autoconf" "pkg-config" "libfox-1.6-dev" "libproj-dev" "libgdal-dev")
    install_LIB_linux libs[@]
elif [[ "$OS" == "Mac OS X" ]]; then
    libs=("libtool" "automake" "autoconf" "pkg-config" "homebrew/x11/fox" "proj" "gdal" "xerces-c")
    install_LIB_Mac libs[@]
fi

echo ""
echo "Preparing to install SUMO"
echo "========================="

ver=$(sumo 2> /dev/null | grep 'SUMO Version' | awk '{print $3}')
if [[ "" != "$ver" ]]; then
    loc=$(which sumo)
    echo "found SUMO $ver in"
    echo "    $loc"
    echo "skip downloading/making SUMO"    
else

echo ""
echo "Cloning SUMO git repository"
echo "==========================="
# check if SUMO directory exists
if [ ! -d "VENTOS_SUMO" ]; then
    # cloning git
    if ! git clone https://github.com/ManiAm/VENTOS_SUMO; then
        exit 1
    fi
    # make sure the folder is created
    if [[ ! -d "VENTOS_SUMO" ]]; then
        echo "VENTOS_SUMO folder does not exist!"
        exit 1
    fi
else
    echo "VENTOS_SUMO folder already exists!"
fi

echo ""
echo "Running SUMO configure"
echo "======================"

cd VENTOS_SUMO
cd sumo
if [[ $? -ne 0 ]]; then
    exit 1
fi

if [[ "$OS" == "Mac OS X" ]]; then
    # homebrew installs xquartz in /opt/x11/
    export CPPFLAGS="$CPPFLAGS -I/opt/X11/include/"
    export LDFLAGS="-L/opt/X11/lib"
fi

echo "generating configure file ..."
make -f Makefile.cvs > /dev/null

echo "running configure ..."
confOut=$( { ./configure --enable-debug --with-proj-gdal=/usr/local > /tmp/VENTOS_tmp/out.xzevap; } 2>&1 )
printf "%s \n" "$confOut"

# should we terminate this script
check=$(echo "$confOut" | grep -e "error" -e "configure: WARNING")
if [ "" != "$check" ]; then
    echo ""    # insert new line for readability
    exit 1
fi

# check if SUMO bin is in the path
SUMO_BIN_DIR=$(pwd)"/bin"
if [[ ! -d $SUMO_BIN_DIR ]]; then
   echo "The $SUMO_BIN_DIR directory does not exist!"
   exit 1
else
  # ...then we create a small tmp file to check if the dir is in the path
  probefile=__second__probe__

  echo '' >$SUMO_BIN_DIR/$probefile
  chmod +x  $SUMO_BIN_DIR/$probefile

  if ($probefile) >/dev/null 2>/dev/null; then
    echo "Your PATH contains $SUMO_BIN_DIR. Good!"
  else
      printf "WARNING: your PATH doesn't contain $SUMO_BIN_DIR! \nAdd the following line to your .profile or .bash_profile (provided you use bash): \nexport PATH=\$PATH:$SUMO_BIN_DIR \n"

      # show instruction on setting sumo path
      if [[ "$OS" == "Ubuntu" ]]; then
help="follow these steps to add SUMO bin folder to PATH: 
1. Open ~/.bashrc in any text editor:
       gedit ~/.bashrc
2. Append the above export command into .bashrc
3. Use source to reload .bashrc:
       source ~/.bashrc"
          printf "\n\e[1;32m$help\e[0m \n"

      elif [[ "$OS" == "Mac OS X" ]]; then
help="follow these steps to add SUMO bin folder to PATH: 
1. Open ~/.bash_profile in any text editor:
       nano ~/.bash_profile
2. Append the above export command into .bash_profile
3. Use source to reload .bash_profile:
       source ~/.bash_profile"
          printf "\n\e[1;32m$help\e[0m \n"
      fi

      printf "\n\e[1;31mAfter applying the changes, run the script again!\e[0m \n"

      # removing the prob file
      rm $SUMO_BIN_DIR/$probefile
      exit 1
  fi

  # removing the prob file
  rm $SUMO_BIN_DIR/$probefile
fi

echo ""
echo "Making SUMO"
echo "==========="

# start making SUMO
printf "\e[1;32mcompiling takes some time, so relax and \nwatch: https://www.youtube.com/watch?v=BlFdAm2AjAk \e[0m \n"
echo " "
make -j4 > /dev/null
echo "make is finished!"

# go out of VENTOS_SUMO folder
cd ..
cd ..

fi # end of SUMO installation


###############################
## Start VENTOS installation ##
###############################

# change directory to VENTOS
cd $DIR
if [[ $? -ne 0 ]]; then
    exit 1
fi
# change directory to parent of VENTOS
cd ..

echo ""
echo "Check main libraries for VENTOS"
echo "==============================="

if [[ "$OS" == "Ubuntu" ]]; then

    # in Ubuntu 12.04, libboost-all-dev installs 1.46 but we need 1.48 at minimum
    if [[ "$VER_major" == "12" && "$VER_minor" == "04" ]]; then
        boostLIB="libboost1.48-all-dev"
    else
        boostLIB="libboost-all-dev"
    fi
    
    libs=("$boostLIB" "libssl-dev" "libcurl4-gnutls-dev" "libbluetooth-dev")
    install_LIB_linux libs[@]

elif [[ "$OS" == "Mac OS X" ]]; then

    libs=("boost")
    install_LIB_Mac libs[@]
fi

# cd to tmp
cd /tmp/VENTOS_tmp
if [[ $? -ne 0 ]]; then
    exit 1
fi

echo ""
echo "Check cmake"
echo "==========="

# install cmake lib
if [[ "$OS" == "Ubuntu" ]]; then
    libs=("cmake" "cmake-curses-gui")
    install_LIB_linux libs[@]
elif [[ "$OS" == "Mac OS X" ]]; then
    libs=("cmake")
    install_LIB_Mac libs[@]
fi

# check the cmake version (shark needs higher versions!)
version=$(cmake -version | grep ^'cmake version' | sed 's/^.* //g')
echo "cmake version is" $version

# should we install a newer version?
vercomp "$version" "2.8.7"
result=$?
if ! [[ "$result" == "1" ]]; then
    if [ ! -d "CMake" ]; then
        echo "downloading CMake"
        curl -o cmake.zip -LOk https://github.com/Kitware/CMake/archive/master.zip
        unzip cmake.zip -d CMake > /dev/null
    fi

    cd CMake
    cd CMake-master
    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    echo "installing cmake ..."
    mkdir _build
    cd _build
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr > /dev/null
    make
    echo $sudoPass | sudo -S make install > /dev/null
    if [[ "$OS" == "Ubuntu" ]]; then
        echo $sudoPass | sudo -S ldconfig  # we need cmake in the next step
    fi

    cd ..
    cd ..
    cd ..
fi

echo ""
echo "Check gnuplot"
echo "============="

# install gnuplot
if [[ "$OS" == "Ubuntu" ]]; then
    libs=("gnuplot" "gnuplot-x11")
    install_LIB_linux libs[@]
elif [[ "$OS" == "Mac OS X" ]]; then
    libs=("gnuplot")
    install_LIB_Mac libs[@]
fi

# check version
version=$(gnuplot --version | awk '{print $2}')
echo "gnuplot version is" $version

# should we install a newer version?
vercomp "$version" "5.0"
result=$?
if [[ "$result" == "2" ]]; then
    if [ ! -d "gnuplot" ]; then
        echo "downloading gnuplot"
        lftp -e 'pget -n 2 gnuplot-5.0.3.tar.gz -o /tmp/VENTOS_tmp/gnuplot.tar.gz; bye' -p 28 -u userftp,userftp ftp://rubinet.ece.ucdavis.edu/download
        mkdir gnuplot
        tar zxf gnuplot.tar.gz -C gnuplot --strip 1
    fi

#libgd-dev
#liblua5.2-dev
#libwxgtk2.8-dev

    cd gnuplot
    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    echo "installing gnuplot ..."
    ./configure > /dev/null 2> /dev/null
    make > /dev/null
    echo $sudoPass | sudo -S make install > /dev/null

    cd ..
fi

echo ""
echo "Check libpcap"
echo "============="

if [[ "$OS" == "Ubuntu" ]]; then
    libs=("libpcap-dev")
    install_LIB_linux libs[@]

    getLibVersions_Linux "libpcap" "1.7"
elif [[ "$OS" == "Mac OS X" ]]; then
    getLibVersions_Mac "libpcap" "1.7"
fi

result=$?
#if [[ ("$result" == "1") || ("$result" == "2") ]]; then
if [[ 1 ]]; then
    if [ ! -d "libpcap" ]; then
        echo "downloading libpcap"
        curl -o libpcap.zip -LOk https://github.com/the-tcpdump-group/libpcap/archive/master.zip
        unzip libpcap.zip -d libpcap > /dev/null
    fi

    cd libpcap
    cd libpcap-master
    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    echo "installing libpcap ..."
    ./configure > /dev/null
    make > /dev/null
    echo $sudoPass | sudo -S make install > /dev/null

    cd ..
    cd ..
else
    echo "libpcap is already installed!"
fi

echo ""
echo "Check libusb"
echo "============"

if [[ "$OS" == "Ubuntu" ]]; then
    libs=("libusb-1.0-0-dev" "libtool" "automake" "autotools-dev" "libudev-dev")
    install_LIB_linux libs[@]

    getLibVersions_Linux "libusb-1.0" "0.1.0"

elif [[ "$OS" == "Mac OS X" ]]; then
    libs=("libusb" "libtool" "automake")
    install_LIB_Mac libs[@]

    getLibVersions_Mac "libusb-1.0" "0.1.0"
fi

result=$?
#if [[ ("$result" == "1") || ("$result" == "2") ]]; then
if [[ 1 ]]; then
    if [ ! -d "libusb" ]; then
        echo "downloading libusb"
        curl -o libusb.zip -LOk https://github.com/libusb/libusb/archive/master.zip
        unzip libusb.zip -d libusb > /dev/null
    fi

    cd libusb
    cd libusb-master
    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    echo "installing libusb ..."
    ./autogen.sh > /dev/null
    ./configure > /dev/null
    make > /dev/null
    echo $sudoPass | sudo -S make install > /dev/null

    cd ..
    cd ..
else
    echo "libusb-1.0 is already installed!"
fi

echo ""
echo "check snmp++"
echo "============"

# libsnmp++ library will be copied into /usr/local/lib and the header files will be copied into /usr/local/include.

if [[ "$OS" == "Ubuntu" ]]; then
    getLibVersions_Linux "libsnmp++" "33.0.5"

elif [[ "$OS" == "Mac OS X" ]]; then
    getLibVersions_Mac "libsnmp++" "33.0.5"
fi

result=$?
#if [[ ("$result" == "1") || ("$result" == "2") ]]; then
if [[ 1 ]]; then
    if [ ! -f "snmp++-3.3.5.tar.gz" ]; then
        # download snmp++ API
        echo "downloading snmp++"
        curl -o snmp.tar.gz http://www.agentpp.com/download/snmp++-3.3.5.tar.gz
        mkdir snmp
        tar zxf snmp.tar.gz -C snmp --strip 1 
    fi

    cd snmp
    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    # make executable (Mac OS X)
    chmod +x build-aux/install-sh

    echo "installing snmp++ ..."
    ./configure > /dev/null
    make > /dev/null
    echo $sudoPass | sudo -S make install > /dev/null

    cd ..
else
    echo "snmp++ is already installed!"
fi

echo ""
echo "check eigen"
echo "==========="

# Eigen consists only of header files, hence there is nothing to compile before you can use it. The header files will be copied into /usr/local/include.

if [ -d "/usr/local/include/eigen3" ]; then
    echo "eigen is already installed!"
else
    if [ ! -d "eigen" ]; then
        echo "downloading eigen"
        curl -o eigen.zip -LOk https://github.com/RLovelett/eigen/archive/master.zip
        unzip eigen.zip -d eigen > /dev/null
    fi

    cd eigen
    cd eigen-master
    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    echo "installing eigen ..."
    mkdir build
    cd build
    cmake ../ > /dev/null
    echo $sudoPass | sudo -S make install > /dev/null

    cd ..
    cd ..
    cd ..
fi

echo ""
echo "check shark"
echo "==========="

# libshark library will be copied into /usr/local/lib and the header files will be copied into /usr/local/include.
# in mac os x, brew install shark does not make symbolic links for include:
# sudo ln -s /usr/local/Cellar/shark/3.0.0/include/shark /usr/local/include
# moreover, we need shark_debug shared library. So shark should be compiled manually!

if [[ "$OS" == "Ubuntu" ]]; then
    libs=("libatlas-base-dev")
    install_LIB_linux libs[@]

    getLibVersions_Linux "libshark" "3.0.0"
elif [[ "$OS" == "Mac OS X" ]]; then
    getLibVersions_Mac "libshark" "3.0.0"
fi

result=$?
#if [[ ("$result" == "1") || ("$result" == "2") ]]; then
if [[ 1 ]]; then
    if [ ! -d "Shark" ]; then
        echo "downloading shark"
        curl -o shark.zip -LOk https://github.com/Shark-ML/Shark/archive/master.zip
        unzip shark.zip -d Shark > /dev/null
    fi

    cd Shark
    cd Shark-master
    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    echo "installing shark ..."
    mkdir build
    cd build
    cmake "-DBUILD_EXAMPLES=OFF" "-DBUILD_TESTING=OFF" "-DBUILD_SHARED_LIBS=ON" "-DCMAKE_BUILD_TYPE=Debug" ../ > /dev/null
    make 
    echo $sudoPass | sudo -S make install > /dev/null

    cd ..
    cd ..
    cd ..
else
    echo "libshark is already installed!"
fi


######################
## Finishing up ... ##
######################

# change directory to VENTOS
cd $DIR
if [[ $? -ne 0 ]]; then
    exit 1
fi
# change directory to parent of VENTOS
cd ..

echo ""
echo "Wrapping-up"
echo "==========="

if [[ "$OS" == "Ubuntu" ]]; then
    # ldconfig is a program that is used to maintain the shared library cache in linux. This cache is typically stored in the file /etc/ld.so.cache and is used by the system to map a shared library name to the location of the corresponding shared library file.
    echo -n "registering shared libraries ..."
    echo $sudoPass | sudo -S ldconfig
    echo "done!"

    # we need to set some capabilities for opp_run. More on capabilities here: http://linux.die.net/man/7/capabilities
    # libpcap --> http://packetlife.net/blog/2010/mar/19/sniffing-wireshark-non-root-user/
    # libusb --> 
    # bluZ LE scan --> http://unix.stackexchange.com/questions/96106/bluetooth-le-scan-as-non-root
    echo -n "set capability for opp_run ..."
    cd omnetpp-4.6/bin  # for some reasons we must change our current directory to bin first
    if [[ $? -ne 0 ]]; then
        exit 1
    fi
    echo $sudoPass | sudo -S setcap cap_dac_override,cap_net_raw,cap_net_admin+eip opp_run  # https://www.insecure.ws/linux/getcap_setcap.html
    echo "done!"
    cd ..
    cd ..

    # fix tooltip
    echo -n "do you wish to fix tooltip colors? (y/n) "
    read answer
    if echo "$answer" | grep -iq "^y" ;then
        printf "\e[1;32mOn the Specific tab, find the Tooltips group and change the settings to 'black' foreground over 'pale yellow' background. Click Apply and then Close.\e[0m \n\n"
        gnome-color-chooser 2> /dev/null
    fi
fi

echo -n "removing temporary data ..."
echo $sudoPass | sudo -S rm -rf /tmp/VENTOS_tmp
echo "done!"

echo ""
echo "finished!"


