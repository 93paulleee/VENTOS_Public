#!/bin/bash

#if [ "$EUID" -ne 0 ]; then 
#  echo "Please run as root"
#  exit 1
#fi

echo "Bash version is: $BASH_VERSION$"

OS='unknown'
CODENAME='unknown'
VER='unknown'
ARCH='unknown'

# get current OS information
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    # Ubuntu
    OS=$(lsb_release -si)
    VER=$(lsb_release -sr)
    CODENAME=$(lsb_release -sc)
    ARCH=$(uname -m)
elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
    OS=$(sw_vers -productName)
    VER=$(sw_vers -productVersion)
    ARCH=$(uname -m)
fi

echo "Detected OS:" $OSTYPE $OS $VER "("$CODENAME")", $ARCH

# check OS support
arrIN=(${VER//./ })
VER_major=${arrIN[0]}
VER_minor=${arrIN[1]}
if [[ ("$OSTYPE" == "linux-gnu" && "$OS" == "Ubuntu" && "$VER_major" == "14" && "$VER_minor" == "04" && "$ARCH" == "x86_64") ]]; then
    echo "Starting script ..."

elif [[ ("$OSTYPE" == "linux-gnu" && "$OS" == "Ubuntu" && "$VER_major" == "12" && "$VER_minor" == "04" && "$ARCH" == "x86_64") ]]; then
    echo "Starting script ..."

elif [[ ("$OSTYPE" == "darwin"* && "$OS" == "Mac OS X" && "$VER_major" == "10" && "$VER_minor" == "11" && "$ARCH" == "x86_64") ]]; then
    echo "Starting script ..."

    # check if Command Line Tools is installed
    xcode-select -p > /dev/null 2> /dev/null
    result=$?
    if [[ $result == "2" ]]; then
        echo "installing command line tools ..."
        printf "\e[1;32mChoose the Install button in the window that pops up.\e[0m \n"
        printf "\e[1;32mAfter completion, run the script again.\e[0m \n\n"
        xcode-select --install
        exit 1
    elif [[ $result == "0" ]]; then
        ver=$(pkgutil --pkg-info=com.apple.pkg.CLTools_Executables | grep 'version:' | awk '{print $2}')
        echo "Command line tools version $ver found!"
    fi

    # check if Homebrew is installed
    which -s brew
    if [[ $? != 0 ]] ; then
        # Install Homebrew
        echo "installing homebrew ..."
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    else
        ver=$(brew -v 2> /dev/null | awk '{print $2}')
        echo "Homebrew version $ver found!"
        echo -n "updating homebrew ... "
        brew update > /dev/null 2> /dev/null
        echo "ok"
    fi
else
    echo -n "This OS is not supported (yet)! Do you want to continue anyway? (y/n) "
    read answer
    if echo "$answer" | grep -iq "^y" ;then
        echo "Starting script ..."
    else
        exit 1 # terminate and indicate error
    fi
fi

install_LIB_linux ()
{
    declare -a argAry=("${!1}")
    for i in "${argAry[@]}"
    do
        # check if package $i is installed
        echo -n $i "..."
        PKG_OK=$(dpkg -s $i 2> /dev/null | grep "install ok installed")
        if [ "" == "$PKG_OK" ]; then
            echo "installing"
            sudo apt-get --force-yes --yes install $i > /dev/null
        else
            echo "ok"
        fi
    done
}

install_LIB_Mac ()
{
# brew list
# brew install <>
# brew remove <>
# brew search
# homebrew installs in /usr/local/Cellar/

    declare -a argAry=("${!1}")
    for i in "${argAry[@]}"
    do
        # check if package $i is installed
        echo -n $i "..."
        PKG_OK=$(brew list | grep -w $i)
        if [[ "" == "$PKG_OK" ]]; then
            echo "installing"
            brew install $i > /dev/null
        else
            echo "ok"
        fi
    done
}

# wget --progress=bar:force -O gnuplot.tar.gz URL.tar.gz 2>&1 | progressfilt
progressfilt ()
{
    local flag=false c count cr=$'\r' nl=$'\n'
    while IFS='' read -d '' -rn 1 c
    do
        if $flag
        then
            printf '%c' "$c"
        else
            if [[ $c != $cr && $c != $nl ]]
            then
                count=0
            else
                ((count++))
                if ((count > 1))
                then
                    flag=true
                fi
            fi
        fi
    done
}

# 0: equal
# 1: $1 > $2
# 2: $1 < $2
vercomp () 
{
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

# 0: found
# 1: older lib found
# 2: no lib found
getLibVersions_Linux ()
{
    allLIBs=$(ldconfig -p | grep $1)
    declare new_value=''
    arr=()

    # read line by line
    while IFS= read -r a; do
        loc=$(echo $a | awk '{print $4}')

        if [[ "" != "$loc" ]]; then
            # resolve if a sym link
            if [[ -h $loc ]]; then
                loc=$(readlink -f $loc)
            fi

            # first time? (removing duplicates)
            if [[ ! $new_value =~ $loc ]] ; then
                new_value="$new_value $loc"
                arr+=("$loc")
            fi
        fi
    done < <(echo "$allLIBs")

    # no lib found
    if [ ${#arr[@]} -eq 0 ]; then
        return 2
    fi

    # sort arr
    IFS=$'\n' arr=($(sort <<<"${arr[*]}"))

    # print the found libs
    echo "$1 found in these locations:"
    for i in "${arr[@]}"
    do
        echo "    $i"
    done

    for i in "${arr[@]}"
    do
        # get lib name
        libName=$(basename $i)

        # extract version
        version=$(echo $libName | grep -Po '\.so\.\K([0-9]+\.)*[0-9]+')

        # if a suitable version found!
        vercomp "$version" "$2"
        result=$?
        if ! [[ "$result" == "2" ]]; then
            return 0
        fi
    done

    # older lib found
    return 1
}

# 0: found
# 1: older lib found
# 2: no lib found
getLibVersions_Mac ()
{
    # older lib found
    return 0
}

# check java version
version=$(java -version 2>&1 | awk -F '"' '/version/ {print $2}')
if [[ "" != "$version" ]]; then
    echo "java version is" $version
fi

# should we install java?
version=$(echo $version | sed 's/_.*$//') # remove the _
vercomp "$version" "1.7"
result=$?
if [[ "$result" == "2" ]]; then
    if [[ "$OS" == "Mac OS X" ]]; then
        # on Mac OS
        java > /dev/null 2> /dev/null    # requesting install
        echo "requesting to install java ..."
        printf "\e[1;32mChoose the More Info button in the window that pops up. Then install the latest Java SE runtime. After completion, run the script again.\e[0m \n\n"
        exit 1
    else
        # on Ubuntu
        echo "java version should be >= 1.7"
        echo "[1] install OpenJDK 1.7"
        echo "[2] install Oracle Java 1.8"
        echo -n "your selection? [1] "
        read answer
        if [[ ("$answer" == "") || ("$answer" == "1") ]]; then
            sudo apt-get --force-yes --yes install openjdk-7-jre
        elif [[ "$answer" == "2" ]]; then
            sudo add-apt-repository -y ppa:webupd8team/java > /dev/null
            sudo apt-get update > /dev/null
            # accept the Oracle JDK8 license automatically 
            echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | sudo /usr/bin/debconf-set-selections
            sudo apt-get --force-yes --yes install oracle-java8-installer
            # set the Java environment variables
            sudo apt-get install oracle-java8-set-default > /dev/null       
        else
            exit 1;
        fi
    fi
fi

if [[ "$OS" == "Ubuntu" ]]; then
    # refresh the databse of available packages
    echo "updating available packages ..."
    sudo apt-get update > /dev/null

    echo ""
    echo "Check main libraries for OMNET++"
    echo "================================"
    libs=("build-essential" "gcc" "g++" "bison" "flex" "perl" "tcl-dev" "tk-dev" "libxml2-dev" "zlib1g-dev" "doxygen" "graphviz" "libwebkitgtk-1.0-0")
    install_LIB_linux libs[@]

    echo ""
    echo "Check additional libraries for OMNET++"
    echo "======================================"
    # "openmpi-bin" and "libopenmpi-dev are for parallel simulation support (MPI)
    libs=("openmpi-bin" "libopenmpi-dev" "libpcap-dev" "gnome-color-chooser")
    install_LIB_linux libs[@]

    echo ""
    echo "Check 3D visualization libraries for OMNET++"
    echo "============================================"
    libs=("qt4-qmake" "libqt4-dev" "libqt4-opengl-dev" "openscenegraph" "libopenscenegraph-dev" "openscenegraph-plugin-osgearth" "osgearth" "osgearth-data" "libosgearth-dev")
    install_LIB_linux libs[@]

    echo ""
    echo "Checking downloaders"
    echo "===================="
    libs=("lftp" "curl")  # curl is prefered over wget since Mac OS X has curl by default
    install_LIB_linux libs[@]

elif [[ "$OS" == "Mac OS X" ]]; then
    libs=("open-mpi" "lftp" "curl" "Caskroom/cask/xquartz")
    install_LIB_Mac libs[@]
fi

echo ""
echo "Preparing to install OMNET++"
echo "============================"

# get current directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# change directory to VENTOS
cd $DIR
# change directory to VENTOS_all
cd ..
# tmp stores all downloaded files
mkdir tmp

ver=$(opp_run -v 2> /dev/null | grep 'Build:' | awk '{print $2}')
if [[ "" != "$ver" ]]; then
    loc=$(which opp_run)
    echo "found $ver in"
    echo "    $loc"
    echo "skip downloading/making omnet++"    
else

echo ""
echo "Downloading OMNET++"
echo "==================="
# check if omnet directory exists
if [ ! -d "omnetpp-4.6" ]; then
    # searching for omnet++ archive
    findings=$(find ./tmp -name "omnetpp*.tgz" -o -name "omnetpp*.tar" | wc -l | xargs)  # xargs: remove all whitespaces
    if [[ "$findings" = "0" ]]; then        
        echo "downloading omnet++"
        lftp -e 'pget -n 5 omnetpp-4.6-src.tgz -o tmp/omnetpp.tgz; bye' -p 28 -u userftp,userftp ftp://rubinet.ece.ucdavis.edu/download
    elif [[ "$findings" > "1" ]]; then
        echo "ERROR: more than one omnet++ archive file exists!"
        exit 1
    fi
    
    # now that we have the file, we can extract!
    omnetFile=$(find ./tmp -name "omnetpp*.tgz" -o -name "omnetpp*.tar")
    echo "found" $omnetFile
    echo -n "extracting omnet ..."
    tar zxf $omnetFile  
    echo "done!"
else
    echo "omnetpp-4.6 folder already exists!"
fi

echo ""
echo "Running OMNET++ configure"
echo "========================="

# In the OMNET++ folder you can see the `configure.in` file that is used by autoconf to generate the `configure` script. Additional input parameters for configure script are defined in `configure.user` file. The configure script detects installed software and configuration of your system, and generates three outputs: `config.log`, `config.status`, and `Makefile.inc`. The first two files are used for debugging purposes, and the last file will be read later by the makefiles during the build process.

# run configure in omnet directory
cd omnetpp-4.6
confOut=$( { ./configure > /tmp/out.zvapoq; } 2>&1 )
printf "%s \n" "$confOut"

# should we terminate this script
check=$(echo "$confOut" | grep "configure: error")
if [ "" != "$check" ]; then
    echo ""    # insert new line for readability
    exit 1
fi

# should we terminate this script
check=$(echo "$confOut" | grep "your PATH doesn't contain")
if [ "" != "$check" ]; then
    printf "\n\e[1;31mAfter changing PATH, close this terminal and run the script again!\e[0m \n"
    exit 1
fi

# check if g++ suports c++11
# Starting from version 4.6, OMNET++ uses C++11 standard (formerly known as C++0x) by default. This means that OMNET++ source code as well as all the imported projects will be compiled with this flag. Look for this line in the configure output, and make sure that it is 'yes'.
value=$(</tmp/out.zvapoq)
res=$(echo "$value" | grep "supports -std=c++11... yes")
if [ "" = "$res" ]; then
    printf "\n\e[1;31mconfigure script reports that g++ does not support c++11.\e[0m \n\n"
    # get g++ version
    gppVER=$(g++ --version | grep ^g++ | sed 's/^.* //g')

    # should we install g++ 4.8?
    vercomp "$gppVER" "4.8"
    result=$?
    if [[ "$result" == "2" ]]; then
        echo -n "g++ version is" $gppVER". Install g++ 4.8 (y/n)? "
        read answer
        if echo "$answer" | grep -iq "^y" ;then
            sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test > /dev/null
            sudo apt-get update > /dev/null
            sudo update-alternatives --remove-all gcc > /dev/null
            sudo update-alternatives --remove-all g++ > /dev/null
            sudo apt-get --force-yes --yes install gcc-4.8
            sudo apt-get --force-yes --yes install g++-4.8
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 20 > /dev/null
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 20 > /dev/null
            sudo update-alternatives --config gcc > /dev/null
            sudo update-alternatives --config g++ > /dev/null

            printf "\n\e[1;31mClose this terminal and run the script again!\e[0m \n"
            exit 1
        else
            exit 1;
        fi
    else
        # g++ version is >= 4.8. USE_CXX11 must be unset 
        printf "\e[1;31mc++11 is not enabled in OMNET++. Go to OMNET++ folder and open the 'configure.user' file. Find USE_CXX11 flag and set it to 'yes'.\e[0m \n"
        exit 1
    fi
fi

echo ""
echo "Making OMNET++"
echo "=============="

# start making omnet++
printf "\e[1;32mcompiling takes some time, so relax, grab a cup of coffee and \nwatch: https://www.youtube.com/watch?v=A6XUVjK9W4o \e[0m \n"
echo " "
make > /dev/null
echo "make is finished!"

echo ""
echo "Creating shortcut"
echo "================="

# Running OMNET++ each time from command line might not be desirable for you. You can create a shortcut or launcher to OMNET++ on your desktop.

echo -n "creating desktop shortcut ... "
make install-desktop-icon
echo "done!"

echo -n "creating application launcher ... "
sudo make install-menu-item
echo "done!"

# change directory to parent (VENTOS_all)
cd ..

fi  # end of omnetpp installation

###############################
## Start VENTOS installation ##
###############################

echo ""
echo "Check base libraries"
echo "===================="

if [[ "$OS" == "Ubuntu" ]]; then

    # in Ubuntu 12.04, libboost-all-dev installs 1.46 but we need 1.48 at minimum
    if [[ "$VER_major" == "12" && "$VER_minor" == "04" ]]; then
        boostLIB="libboost1.48-all-dev"
    else
        boostLIB="libboost-all-dev"
    fi

    libs=("$boostLIB" "libssl-dev" "libcurl4-gnutls-dev" "libxerces-c2-dev" "libfox-1.6-dev" "libproj-dev" "gnuplot" "gnuplot-x11" "cmake" "cmake-curses-gui" "libusb-1.0-0-dev" "libtool" "automake" "autotools-dev" "libudev-dev" "libatlas-base-dev")
    install_LIB_linux libs[@]

elif [[ "$OS" == "Mac OS X" ]]; then

    libs=("boost" "gnuplot" "cmake" "libusb" "libtool" "automake")
    install_LIB_Mac libs[@]
fi

# cd to tmp
cd tmp

echo ""
echo "Check gnuplot version"
echo "====================="
# check version
version=$(gnuplot --version | awk '{print $2}')
echo "gnuplot version is" $version

# should we install a newer version?
vercomp "$version" "5.0"
result=$?
if [[ "$result" == "2" ]]; then
    if [ ! -d "gnuplot" ]; then
        echo "downloading gnuplot"
        curl -o gnuplot.tar.gz ftp://ftp.dante.de/pub/tex/graphics/gnuplot/5.0.2/gnuplot-5.0.2.tar.gz
        mkdir gnuplot
        tar zxf gnuplot.tar.gz -C gnuplot --strip 1
    fi

#libgd-dev
#liblua5.2-dev
#libwxgtk2.8-dev

    cd gnuplot

    echo "installing gnuplot ..."
    ./configure > /dev/null 2> /dev/null
    make > /dev/null
    sudo make install > /dev/null

    cd ..
fi

echo ""
echo "Check cmake version"
echo "==================="
# check the cmake version (shark needs higher versions!)
version=$(cmake -version | grep ^'cmake version' | sed 's/^.* //g')
echo "cmake version is" $version

# should we install a newer version?
vercomp "$version" "2.8.7"
result=$?
if ! [[ "$result" == "1" ]]; then
    if [ ! -d "CMake" ]; then
        echo "downloading CMake"
        curl -o cmake.zip -LOk https://github.com/Kitware/CMake/archive/master.zip
        unzip cmake.zip -d CMake > /dev/null
    fi

    cd CMake
    cd CMake-master

    echo "installing cmake ..."
    mkdir _build
    cd _build
    cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr > /dev/null
    make
    sudo make install > /dev/null
    if [[ "$OS" == "Ubuntu" ]]; then
        sudo ldconfig  # we need cmake in the next step
    fi

    cd ..
    cd ..
    cd ..
fi

echo ""
echo "Check libpcap version"
echo "====================="
if [[ "$OS" == "Ubuntu" ]]; then
    getLibVersions_Linux "libpcap" "1.7"
elif [[ "$OS" == "Mac OS X" ]]; then
    getLibVersions_Mac "libpcap" "1.7"
fi
result=$?
#if [[ ("$result" == "1") || ("$result" == "2") ]]; then
if [[ 1 ]]; then
    if [ ! -d "libpcap" ]; then
        echo "downloading libpcap"
        curl -o libpcap.zip -LOk https://github.com/the-tcpdump-group/libpcap/archive/master.zip
        unzip libpcap.zip -d libpcap > /dev/null
    fi

    cd libpcap
    cd libpcap-master

    echo "installing libpcap ..."
    ./configure > /dev/null
    make > /dev/null
    sudo make install > /dev/null

    cd ..
    cd ..
else
    echo "libpcap is already installed!"
fi

echo ""
echo "Check libusb version"
echo "===================="
if [[ "$OS" == "Ubuntu" ]]; then
    getLibVersions_Linux "libusb-1.0" "0.1.0"
elif [[ "$OS" == "Mac OS X" ]]; then
    getLibVersions_Mac "libusb-1.0" "0.1.0"
fi
result=$?
#if [[ ("$result" == "1") || ("$result" == "2") ]]; then
if [[ 1 ]]; then
    if [ ! -d "libusb" ]; then
        echo "downloading libusb"
        curl -o libusb.zip -LOk https://github.com/libusb/libusb/archive/master.zip
        unzip libusb.zip -d libusb > /dev/null
    fi

    cd libusb
    cd libusb-master

    echo "installing libusb ..."
    ./autogen.sh > /dev/null
    ./configure > /dev/null
    make > /dev/null
    sudo make install > /dev/null

    cd ..
    cd ..
else
    echo "libusb-1.0 is already installed!"
fi

echo ""
echo "Installing snmp++"
echo "================="

# libsnmp++ library will be copied into /usr/local/lib and the header files will be copied into /usr/local/include.

if [[ "$OS" == "Ubuntu" ]]; then
    getLibVersions_Linux "libsnmp++" "33.0.5"
elif [[ "$OS" == "Mac OS X" ]]; then
    getLibVersions_Mac "libsnmp++" "33.0.5"
fi
result=$?
if [[ ("$result" == "1") || ("$result" == "2") ]]; then
    if [ ! -f "snmp++-3.3.5.tar.gz" ]; then
        # download snmp++ API
        echo "downloading snmp++"
        curl -o snmp.tar.gz http://www.agentpp.com/download/snmp++-3.3.5.tar.gz
        mkdir snmp
        tar zxf snmp.tar.gz -C snmp --strip 1 
    fi

    cd snmp

    # make executable (Mac OS X)
    chmod +x build-aux/install-sh

    echo "installing snmp++ ..."
    ./configure > /dev/null
    make > /dev/null
    sudo make install > /dev/null

    cd ..
else
    echo "snmp++ is already installed!"
fi

echo ""
echo "Installing eigen"
echo "================"

# Eigen consists only of header files, hence there is nothing to compile before you can use it. The header files will be copied into /usr/local/include.

if [ -d "/usr/local/include/eigen3" ]; then
    echo "eigen is already installed!"
else
    if [ ! -d "eigen" ]; then
        echo "downloading eigen"
        curl -o eigen.zip -LOk https://github.com/RLovelett/eigen/archive/master.zip
        unzip eigen.zip -d eigen > /dev/null
    fi

    cd eigen
    cd eigen-master

    echo "installing eigen ..."
    mkdir build
    cd build
    cmake ../ > /dev/null
    sudo make install > /dev/null

    cd ..
    cd ..
    cd ..
fi

echo ""
echo "Installing shark"
echo "================"

# libshark library will be copied into /usr/local/lib and the header files will be copied into /usr/local/include.

if [[ "$OS" == "Ubuntu" ]]; then
    getLibVersions_Linux "libshark" "3.0.0"
elif [[ "$OS" == "Mac OS X" ]]; then
    getLibVersions_Mac "libshark" "3.0.0"
fi
result=$?
if [[ ("$result" == "1") || ("$result" == "2") ]]; then
    if [ ! -d "Shark" ]; then
        echo "downloading shark"
        curl -o shark.zip -LOk https://github.com/Shark-ML/Shark/archive/master.zip
        unzip shark.zip -d Shark > /dev/null
    fi

    cd Shark
    cd Shark-master

    echo "installing shark ..."
    mkdir build
    cd build
    cmake "-DBUILD_EXAMPLES=OFF" "-DBUILD_TESTING=OFF" "-DBUILD_SHARED_LIBS=ON" "-DCBLAS_INCLUDES:FILEPATH=/usr/include/atlas/cblas.h" ../ > /dev/null
    make 
    sudo make install > /dev/null

    cd ..
    cd ..
    cd ..
else
    echo "libshark is already installed!"
fi

# go out of tmp folder
cd ..

echo ""
echo "Downloading SUMO binaries"
echo "========================="

if [ ! -f VENTOS/sumoBinary/sumo-guiD ]; then
    echo "downloading sumo-guiD"
    lftp -e 'pget -n 5 sumo-guiD -o VENTOS/sumoBinary; bye' -p 28 -u userftp,userftp ftp://rubinet.ece.ucdavis.edu/download
else
    echo "sumo-guiD already exists!"
fi

if [ ! -f VENTOS/sumoBinary/sumoD ]; then
    echo "downloading sumoD"
    lftp -e 'pget -n 5 sumoD -o VENTOS/sumoBinary; bye' -p 28 -u userftp,userftp ftp://rubinet.ece.ucdavis.edu/download
else
    echo "sumoD already exists!"
fi

# make both files executable
echo -n "making both files executable ..."
chmod +x VENTOS/sumoBinary/sumo-guiD
chmod +x VENTOS/sumoBinary/sumoD
echo "done!"

echo ""
echo "Wrapping-up"
echo "==========="

if [[ "$OS" == "Ubuntu" ]]; then
    # ldconfig is a program that is used to maintain the shared library cache in linux. This cache is typically stored in the file /etc/ld.so.cache and is used by the system to map a shared library name to the location of the corresponding shared library file.
    echo -n "registering shared libraries ..."
    sudo ldconfig
    echo "done!"

    # libpcap library is used to sniff packets from network interfaces. We need to give permission to opp_run to be able to access the network interfaces (check [here](http://packetlife.net/blog/2010/mar/19/sniffing-wireshark-non-root-user/)). Moreover, libusb needs permission to open a USB device for read/write. This is done through setting [capabilities](http://linux.die.net/man/7/capabilities) using the following command:
    echo -n "set capability for opp_run ..."
    cd omnetpp-4.6/bin  # for some reasons we must change our current directory to bin first
    sudo setcap cap_dac_override,cap_net_raw,cap_net_admin=eip opp_run
    echo "done!"
    cd ..
    cd ..

    # fix tooltip
    echo -n "do you wish to fix tooltip colors? (y/n) "
    read answer
    if echo "$answer" | grep -iq "^y" ;then
        printf "\e[1;32mOn the Specific tab, find the Tooltips group and change the settings to 'black' foreground over 'pale yellow' background. Click Apply and then Close.\e[0m \n\n"
        gnome-color-chooser 2> /dev/null
    fi
fi

echo -n "removing temporary data ..."
rm -rf tmp
echo "done!"

echo ""
echo "finished!"


