
include params1_General.ini

##########################################################
#                     Section 1                          #
##########################################################

[Config incidentDetection]
description = "AID in three-lane highway"

Network.SUMODirectory = "sumo/Incident_Detection"

Network.TraCI.terminate = 200s
Network.TraCI.updateInterval = 1s

Network.statistics.collectVehiclesData = false
Network.statistics.vehicleDataLevel = 4

Network.TrafficLight.collectInductionLoopData = true

Network.V[*].appl.SUMOvehicleDebug = false
Network.V[*].appl.beaconInterval = 1s

Network.addEntity.on = true
Network.addEntity.mode = 7
Network.addEntity.totalVehicles = 2000

Network.addRSU.on = true
Network.addRSU.mode = 1       

Network.RSU[*].appl.printIncidentDetection = true


##########################################################
#                     Section 2                          #
##########################################################

[Config Adversary]
description = "adversary in CACC vehicle stream"

Network.SUMODirectory = "sumo/adversary" 

Network.TraCI.terminate = 600s

Network.statistics.collectVehiclesData = true
Network.statistics.vehicleDataLevel = 4

Network.Tracking.on = true

Network.V[*].appl.SUMOvehicleDebug = true
Network.V[*].appl.degradeToACC = true

Network.addEntity.on = true
Network.addEntity.mode = 1
Network.addEntity.totalVehicles = 10
Network.addEntity.vehiclesType = "TypeCACC1"
Network.addEntity.distribution = 1
Network.addEntity.interval = 1000ms

Network.warmup.on = true

Network.speedprofile.on = true
Network.speedprofile.mode = 3

Network.addAdversary.on = true
Network.adversary[*].mobility.x = 1890  # not effective in jamming attack

Network.adversary[*].appl.AttackT = 212 # 271 (jamming)
Network.adversary[*].appl.falsificationAttack = false
Network.adversary[*].appl.replayAttack = false
Network.adversary[*].appl.jammingAttack = true


##########################################################
#                     Section 3                          #
##########################################################

[Config Router]
description = "routing of vehicle in a grid network"

Network.SUMODirectory = "sumo/gridnet"

Network.TraCI.terminate = 10000s
Network.TraCI.updateInterval = 1s

Network.statistics.collectVehiclesData = true
Network.statistics.vehicleDataLevel = 2

# 0=no debug. Higher numbers output more debug info.
# for now three debug levels are defined: 1, 2 and 3
Network.router.debugLevel = 1
Network.TrafficLight.debugLevel = 1

#vehicle add parameters
Network.addEntity.on = true
Network.addEntity.mode = 8
Network.router.vehicleCount = ${vehicleCount=500,3000,6000}
Network.router.createTime = 60
Network.router.ReroutingVehiclePercent = ${ReroutingPercent=0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0}
Network.router.collectVehicleTimeData = true

#Traffic Light Parameters
Network.TrafficLight.yellowTime = 3s #Duration that all green lights turn to yellow before switching to a new phase.
Network.TrafficLight.TLLogicMode = ${TLLogicMode = 1,3} #0=Fixed, 1=HighDensity, 2=LowDensity, 3=Cooperative
Network.TrafficLight.HighDensityRecalculateFrequency = 20
Network.TrafficLight.LowDensityExtendTime = 3
Network.TrafficLight.MaxPhaseDuration = 60 #Low density/Cooperative will not extend traffic lights to last longer than this
Network.TrafficLight.MinPhaseDuration = 10 #Cooperative control will not assign a phase duration shorter than this

#Routing algorithm parameters:
Network.router.enableRouter = true
Network.V[*].appl.routingMode = 0 #0=Dijsktra's, 1=Hypertree, 2=None
Network.V[*].appl.maxSystemOffset = 4s #Random offset for sending initial route request

Network.router.LaneCostsMode = ${LaneCostsMode=2}  #0=No lane costs code, 1=Record times to file, 2=EWMA Mode (requires files from mode 1)
Network.router.EWMARate = 0.2 #average travel time = average travel time * (1-EWMARate) + new data point * EWMARate

#Hysteresis parameters
Network.router.UseHysteresis = false
Network.router.HysteresisCount = 4

# dijkstra's parameters
Network.router.dijkstraOutdateTime = 5
Network.V[*].appl.requestInterval = 20s
Network.router.TLLookahead = 300
Network.router.straightCost = 2.0
Network.router.rightTurnCost = 4.0
Network.router.leftTurnCost = 6.0
Network.router.uTurnCost = 6.0

# Hypertree algo parameters
Network.router.timePeriodMax = 300
Network.V[*].appl.hypertreeUpdateInterval = 2

#Accident algo parameters
Network.router.UseAccidents = true
Network.router.AccidentCheckInterval = 5

#Extra network parameters needed for router to work - do not change
Network.TrafficLight.TLControlMode = 8
Network.V[*].appl.VANETenabled = false    # vehicle do not beacon!
Network.V[*].appl.SUMOvehicleDebug = false
Network.V[*].appl.requestRoutes = true
Network.V[*].appl.systemMsgLengthBits = 512bit
Network.V[*].appl.systemMsgPriority = 1


##########################################################
#                     Section 4                          #
##########################################################

[Config TrafficSignalControl]
description = "Complete (isolated) intersection with vehicles, bikes, and pedestrians"

# list of scenarios:
# 1. fixed-time
# 2. adaptive webster
# 3. traffic-actuated (passage-time = -1s when using active detection)
# 4. highest queue (max queue size = -1 when using active detection)
# 5. lowest delay
# 6. multi-class

Network.SUMODirectory = "sumo/pedestrian"

Network.TraCI.terminate = 10000s
Network.TraCI.updateInterval = 0.1s

# 1:fixed-time    2:adaptive Webster   3:traffic actuated    4:highest queue   5:lowest delay   6: LQF_MWM    7: OJF_MWM
Network.TrafficLight.TLControlMode = 3 #${TLControl= 6, 7}  #${TLControl= 1, 3, 4, 5}    #${TLControl= 3, 3, 4, 4}  
#Network.TrafficLight.passageTime = ${passage= 2s, -1s, -1s, -1s ! TLControl} 
#Network.TrafficLight.maxQueueSize = ${maxQ=  -1,  -1,   5,  -1  ! TLControl}

Network.TrafficLight.debugLevel = 2

Network.TrafficLight.collectTLQueuingData = true
Network.TrafficLight.collectTLPhasingData = true
Network.TrafficLight.collectVehDelay = true

Network.statistics.collectVehiclesData = false   # optional
Network.statistics.vehicleDataLevel = 3

Network.RSU[*].appl.collectVehApproach = true  # (activeDetection = true)

Network.V[*].appl.VANETenabled = false  #${false, false, false, true ! TLControl}   
Network.V[*].appl.signalBeaconing = true   # vehicles send beacons as a signal
Network.V[*].appl.smartBeaconing = true    # (activeDetection = true)

Network.addEntity.on = true
Network.addEntity.mode = 10  #${addEntity= 10, 11}
Network.addEntity.vehRouteDist = "50,50,0" #${routeDist= "50,50,0", "70,30,0"}
Network.addEntity.vehMultiClass = true
Network.addEntity.vehClassDist = "90,10"
Network.addEntity.bike = true

Network.addRSU.on = true
Network.addRSU.mode = 1    # add RSUs based on the RSUsLocation.xml file
