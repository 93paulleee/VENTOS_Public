/*
 * Generated by asn1c-0.9.27 (http://lionet.info/asn1c)
 * From ASN.1 module "DSRC"
 * 	found in "J2735.asn"
 */

#ifndef	_VehicleStatus_H_
#define	_VehicleStatus_H_


#include <SAE_J2735/asn_application.h>

/* Including external dependencies */
#include <SAE_J2735/ExteriorLights.h>
#include <SAE_J2735/LightbarInUse.h>
#include <SAE_J2735/BrakeSystemStatus.h>
#include <SAE_J2735/BrakeAppliedPressure.h>
#include <SAE_J2735/CoefficientOfFriction.h>
#include <SAE_J2735/SunSensor.h>
#include <SAE_J2735/RainSensor.h>
#include <SAE_J2735/AmbientAirTemperature.h>
#include <SAE_J2735/AmbientAirPressure.h>
#include <SAE_J2735/ThrottlePosition.h>
#include <SAE_J2735/SpeedandHeadingandThrottleConfidence.h>
#include <SAE_J2735/SpeedConfidence.h>
#include <SAE_J2735/GPSstatus.h>
#include <SAE_J2735/WiperStatusFront.h>
#include <SAE_J2735/WiperRate.h>
#include <SAE_J2735/WiperStatusRear.h>
#include <SAE_J2735/constr_SEQUENCE.h>
#include <SAE_J2735/SteeringWheelAngle.h>
#include <SAE_J2735/SteeringWheelAngleConfidence.h>
#include <SAE_J2735/SteeringWheelAngleRateOfChange.h>
#include <SAE_J2735/DrivingWheelAngle.h>
#include <SAE_J2735/AccelerationSet4Way.h>
#include <SAE_J2735/VerticalAccelerationThreshold.h>
#include <SAE_J2735/YawRateConfidence.h>
#include <SAE_J2735/AccelerationConfidence.h>
#include <SAE_J2735/ObstacleDistance.h>
#include <SAE_J2735/ObstacleDirection.h>
#include <SAE_J2735/DDateTime.h>
#include <SAE_J2735/VehicleHeight.h>
#include <SAE_J2735/BumperHeights.h>
#include <SAE_J2735/VehicleMass.h>
#include <SAE_J2735/TrailerWeight.h>
#include <SAE_J2735/VehicleType.h>
#include <SAE_J2735/EssPrecipYesNo.h>
#include <SAE_J2735/EssPrecipRate.h>
#include <SAE_J2735/EssPrecipSituation.h>
#include <SAE_J2735/EssSolarRadiation.h>
#include <SAE_J2735/EssMobileFriction.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Forward declarations */
struct FullPositionVector;
struct VehicleIdent;
struct J1939data;
struct ConfidenceSet;

/* VehicleStatus */
typedef struct VehicleStatus {
	ExteriorLights_t	*lights	/* OPTIONAL */;
	LightbarInUse_t	*lightBar	/* OPTIONAL */;
	struct wipers {
		WiperStatusFront_t	 statusFront;
		WiperRate_t	 rateFront;
		WiperStatusRear_t	*statusRear	/* OPTIONAL */;
		WiperRate_t	*rateRear	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *wipers;
	BrakeSystemStatus_t	*brakeStatus	/* OPTIONAL */;
	BrakeAppliedPressure_t	*brakePressure	/* OPTIONAL */;
	CoefficientOfFriction_t	*roadFriction	/* OPTIONAL */;
	SunSensor_t	*sunData	/* OPTIONAL */;
	RainSensor_t	*rainData	/* OPTIONAL */;
	AmbientAirTemperature_t	*airTemp	/* OPTIONAL */;
	AmbientAirPressure_t	*airPres	/* OPTIONAL */;
	struct steering {
		SteeringWheelAngle_t	 angle;
		SteeringWheelAngleConfidence_t	*confidence	/* OPTIONAL */;
		SteeringWheelAngleRateOfChange_t	*rate	/* OPTIONAL */;
		DrivingWheelAngle_t	*wheels	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *steering;
	struct accelSets {
		AccelerationSet4Way_t	*accel4way	/* OPTIONAL */;
		VerticalAccelerationThreshold_t	*vertAccelThres	/* OPTIONAL */;
		YawRateConfidence_t	*yawRateCon	/* OPTIONAL */;
		AccelerationConfidence_t	*hozAccelCon	/* OPTIONAL */;
		struct ConfidenceSet	*confidenceSet	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *accelSets;
	struct object {
		ObstacleDistance_t	 obDist;
		ObstacleDirection_t	 obDirect;
		DDateTime_t	 dateTime;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *object;
	struct FullPositionVector	*fullPos	/* OPTIONAL */;
	ThrottlePosition_t	*throttlePos	/* OPTIONAL */;
	SpeedandHeadingandThrottleConfidence_t	*speedHeadC	/* OPTIONAL */;
	SpeedConfidence_t	*speedC	/* OPTIONAL */;
	struct vehicleData {
		VehicleHeight_t	 height;
		BumperHeights_t	 bumpers;
		VehicleMass_t	 mass;
		TrailerWeight_t	 trailerWeight;
		VehicleType_t	 type;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *vehicleData;
	struct VehicleIdent	*vehicleIdent	/* OPTIONAL */;
	struct J1939data	*j1939data	/* OPTIONAL */;
	struct weatherReport {
		EssPrecipYesNo_t	 isRaining;
		EssPrecipRate_t	*rainRate	/* OPTIONAL */;
		EssPrecipSituation_t	*precipSituation	/* OPTIONAL */;
		EssSolarRadiation_t	*solarRadiation	/* OPTIONAL */;
		EssMobileFriction_t	*friction	/* OPTIONAL */;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *weatherReport;
	GPSstatus_t	*gpsStatus	/* OPTIONAL */;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} VehicleStatus_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_VehicleStatus;

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include <SAE_J2735/FullPositionVector.h>
#include <SAE_J2735/VehicleIdent.h>
#include <SAE_J2735/J1939data.h>
#include <SAE_J2735/ConfidenceSet.h>

#endif	/* _VehicleStatus_H_ */
#include <SAE_J2735/asn_internal.h>
