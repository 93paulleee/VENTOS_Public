//
// Generated file, do not edit! Created by opp_msgc 4.3 from msg/Messages.msg.
//

#ifndef _MESSAGES_M_H_
#define _MESSAGES_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0403
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <Coord.h>
// }}



/**
 * Class generated from <tt>msg/Messages.msg</tt> by opp_msgc.
 * <pre>
 * packet WaveShortMessage
 * {
 * 	
 * 	int wsmVersion = 0;
 * 	
 * 	int securityType = 0;
 * 	
 * 	int channelNumber;
 * 	
 * 	int dataRate = 1;
 * 	
 * 	int priority = 3;
 * 	
 * 	int psid = 0;
 * 	
 * 	string psc = "Service with some Data";
 * 	
 * 	int wsmLength;
 * 	
 * 	string wsmData = "Some Data";
 * 	
 * 	
 *     
 * };
 * </pre>
 */
class WaveShortMessage : public ::cPacket
{
  protected:
    int wsmVersion_var;
    int securityType_var;
    int channelNumber_var;
    int dataRate_var;
    int priority_var;
    int psid_var;
    opp_string psc_var;
    int wsmLength_var;
    opp_string wsmData_var;

  private:
    void copy(const WaveShortMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WaveShortMessage&);

  public:
    WaveShortMessage(const char *name=NULL, int kind=0);
    WaveShortMessage(const WaveShortMessage& other);
    virtual ~WaveShortMessage();
    WaveShortMessage& operator=(const WaveShortMessage& other);
    virtual WaveShortMessage *dup() const {return new WaveShortMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getWsmVersion() const;
    virtual void setWsmVersion(int wsmVersion);
    virtual int getSecurityType() const;
    virtual void setSecurityType(int securityType);
    virtual int getChannelNumber() const;
    virtual void setChannelNumber(int channelNumber);
    virtual int getDataRate() const;
    virtual void setDataRate(int dataRate);
    virtual int getPriority() const;
    virtual void setPriority(int priority);
    virtual int getPsid() const;
    virtual void setPsid(int psid);
    virtual const char * getPsc() const;
    virtual void setPsc(const char * psc);
    virtual int getWsmLength() const;
    virtual void setWsmLength(int wsmLength);
    virtual const char * getWsmData() const;
    virtual void setWsmData(const char * wsmData);
};

inline void doPacking(cCommBuffer *b, WaveShortMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, WaveShortMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msg/Messages.msg</tt> by opp_msgc.
 * <pre>
 * packet Beacon extends WaveShortMessage 
 * {
 * 	string sender;
 * 	string recipient;
 * 	Coord pos;
 * 	double speed;
 * 	double accel;
 * 	double maxDecel;
 * 	string lane;
 * 	string platoonID;
 * 	int platoonDepth;
 * };
 * </pre>
 */
class Beacon : public ::WaveShortMessage
{
  protected:
    opp_string sender_var;
    opp_string recipient_var;
    Coord pos_var;
    double speed_var;
    double accel_var;
    double maxDecel_var;
    opp_string lane_var;
    opp_string platoonID_var;
    int platoonDepth_var;

  private:
    void copy(const Beacon& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Beacon&);

  public:
    Beacon(const char *name=NULL, int kind=0);
    Beacon(const Beacon& other);
    virtual ~Beacon();
    Beacon& operator=(const Beacon& other);
    virtual Beacon *dup() const {return new Beacon(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
    virtual const char * getRecipient() const;
    virtual void setRecipient(const char * recipient);
    virtual Coord& getPos();
    virtual const Coord& getPos() const {return const_cast<Beacon*>(this)->getPos();}
    virtual void setPos(const Coord& pos);
    virtual double getSpeed() const;
    virtual void setSpeed(double speed);
    virtual double getAccel() const;
    virtual void setAccel(double accel);
    virtual double getMaxDecel() const;
    virtual void setMaxDecel(double maxDecel);
    virtual const char * getLane() const;
    virtual void setLane(const char * lane);
    virtual const char * getPlatoonID() const;
    virtual void setPlatoonID(const char * platoonID);
    virtual int getPlatoonDepth() const;
    virtual void setPlatoonDepth(int platoonDepth);
};

inline void doPacking(cCommBuffer *b, Beacon& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, Beacon& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>msg/Messages.msg</tt> by opp_msgc.
 * <pre>
 * packet PlatoonMsg extends WaveShortMessage 
 * {
 *     int req_res_type;
 *     string vehicleID;
 *     string sendingPlatoonID;
 *     string receivingPlatoonID;
 *     int value;
 * };
 * </pre>
 */
class PlatoonMsg : public ::WaveShortMessage
{
  protected:
    int req_res_type_var;
    opp_string vehicleID_var;
    opp_string sendingPlatoonID_var;
    opp_string receivingPlatoonID_var;
    int value_var;

  private:
    void copy(const PlatoonMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PlatoonMsg&);

  public:
    PlatoonMsg(const char *name=NULL, int kind=0);
    PlatoonMsg(const PlatoonMsg& other);
    virtual ~PlatoonMsg();
    PlatoonMsg& operator=(const PlatoonMsg& other);
    virtual PlatoonMsg *dup() const {return new PlatoonMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getReq_res_type() const;
    virtual void setReq_res_type(int req_res_type);
    virtual const char * getVehicleID() const;
    virtual void setVehicleID(const char * vehicleID);
    virtual const char * getSendingPlatoonID() const;
    virtual void setSendingPlatoonID(const char * sendingPlatoonID);
    virtual const char * getReceivingPlatoonID() const;
    virtual void setReceivingPlatoonID(const char * receivingPlatoonID);
    virtual int getValue() const;
    virtual void setValue(int value);
};

inline void doPacking(cCommBuffer *b, PlatoonMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PlatoonMsg& obj) {obj.parsimUnpack(b);}


#endif // _MESSAGES_M_H_
